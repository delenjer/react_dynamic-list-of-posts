{"version":3,"sources":["components/User/User.tsx","components/Comment/Comment.tsx","components/CommentList/CommentList.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","api/api.ts","App.tsx","index.tsx"],"names":["User","user","name","email","address","street","suite","city","className","Comment","comment","body","CommentList","commentsList","map","key","id","Post","post","title","PostList","postlists","API_URL","getData","url","a","fetch","response","json","App","useState","posts","setPosts","isLoading","setLoading","searchValue","setSearchValue","showPosts","Promise","all","loadedPosts","loadedUsers","loadedComments","preparedPosts","find","person","userId","filter","postId","filteredPosts","useMemo","toLowerCase","includes","trim","length","placeholder","value","onChange","event","target","type","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d1c1d81.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\ninterface Props {\n  user: User;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  const { name, email } = user;\n  const { street, suite, city } = user.address;\n\n  return (\n    <ul className=\"user-list\">\n      <li className=\"user-item\">\n        <span className=\"user-title\">Name:</span>\n        {name}\n      </li>\n      <li className=\"user-item\">\n        <span className=\"user-title\">Email:</span>\n        {email}\n      </li>\n      <li className=\"user-item\">\n        <span className=\"user-title\">Street:</span>\n        {street}\n      </li>\n      <li className=\"user-item\">\n        <span className=\"user-title\">Suite:</span>\n        {suite}\n      </li>\n      <li className=\"user-item\">\n        <span className=\"user-title\">City:</span>\n        {city}\n      </li>\n    </ul>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  comment: CommentType;\n}\n\nexport const Comment: FC<Props> = ({ comment }) => (\n  <>\n    <h3 className=\"title comment-title\">{comment.name}</h3>\n    <p className=\"comment-email\">{comment.email}</p>\n    <p>{comment.body}</p>\n  </>\n);\n","import React, { FC } from 'react';\nimport { Comment } from '../Comment/Comment';\n\ninterface Props {\n  commentsList: CommentType[];\n}\n\nexport const CommentList: FC<Props> = ({ commentsList }) => (\n  <div className=\"comment\">\n    {commentsList.map(comment => (\n      <Comment key={comment.id} comment={comment} />\n    ))}\n  </div>\n);\n","import React, { FC } from 'react';\nimport { User } from '../User/User';\nimport { CommentList } from '../CommentList/CommentList';\n\ninterface Props {\n  post: FullPostType;\n}\n\nexport const Post: FC<Props> = ({ post }) => {\n  const {\n    title,\n    body,\n    user,\n    comment,\n  } = post;\n\n  return (\n    <>\n      <h2 className=\"title\">{title}</h2>\n      <p>{body}</p>\n      <div>\n        <User user={user} />\n      </div>\n      <CommentList commentsList={comment} />\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { Post } from '../Post/Post';\n\ninterface Props {\n  postlists: FullPostType[];\n}\n\nexport const PostList: FC<Props> = ({ postlists }) => (\n  <div className=\"container\">\n    {postlists.map(post => (\n      <Post key={post.id} post={post} />\n    ))}\n  </div>\n);\n","const API_URL = 'https://jsonplaceholder.typicode.com/';\n\nasync function getData<T>(url: string): Promise<T> {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getPosts = (): Promise<PostType[]> => {\n  return getData<PostType[]>(`${API_URL}posts`);\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return getData<User[]>(`${API_URL}users`);\n};\n\nexport const getComments = (): Promise<CommentType[]> => {\n  return getData<CommentType[]>(`${API_URL}comments`);\n};\n","import React, {\n  FC, useState, ChangeEvent, useMemo,\n} from 'react';\nimport { PostList } from './components/PostList/PostList';\nimport './App.css';\nimport { getPosts, getUsers, getComments } from './api/api';\n\nconst App: FC = () => {\n  const [posts, setPosts] = useState<FullPostType[]>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n\n  const showPosts = async () => {\n    setLoading(true);\n\n    const [loadedPosts, loadedUsers, loadedComments] = await Promise\n      .all([getPosts(), getUsers(), getComments()]);\n\n    const preparedPosts = loadedPosts.map((post) => ({\n      ...post,\n      user: loadedUsers\n        .find((person) => person.id === post.userId) as User,\n      comment: loadedComments\n        .filter((comment) => post.id === comment.postId) as CommentType[],\n    }));\n\n    setPosts(preparedPosts);\n    setLoading(false);\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    setSearchValue(target.value);\n  };\n\n  const filteredPosts = useMemo(() => posts.filter(post => post.title.toLowerCase()\n    .includes(searchValue.trim().toLowerCase())\n        || post.body\n          .toLowerCase()\n          .includes(searchValue.trim().toLowerCase())),\n  [searchValue, posts]);\n\n  return (\n    <>\n      {!posts.length\n        ? (\n          <button\n            className=\"start-button\"\n            type=\"button\"\n            onClick={showPosts}\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Start load posts'}\n          </button>\n        )\n        : (\n          <div className=\"app\">\n            <h1 className=\"main-title\">Dynamic list of posts</h1>\n            <input\n              className=\"input\"\n              placeholder=\"Search the post\"\n              value={searchValue}\n              onChange={handleChange}\n              type=\"text\"\n            />\n            <PostList postlists={filteredPosts} />\n          </div>\n        )}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}